<?xml version="1.0"?><st-source><component-created><name>Info606</name> <type>package</type></component-created><class><name>Complex</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>real imaginary </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Info606</package></attributes></class><methods><class-id>Complex</class-id> <category>accessing</category><body package="Info606" selector="real">real	^real</body></methods><methods><class-id>Complex</class-id> <category>accessing</category><body package="Info606" selector="real:">real: anObject	real := anObject</body></methods><methods><class-id>Complex</class-id> <category>accessing</category><body package="Info606" selector="imaginary">imaginary	^imaginary</body></methods><methods><class-id>Complex</class-id> <category>accessing</category><body package="Info606" selector="imaginary:">imaginary: anObject	imaginary := anObject</body></methods><methods><class-id>Complex</class-id> <category>initialize-release</category><body package="Info606" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	real := nil.	imaginary := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Complex class</class-id> <category>instance creation</category><body package="Info606" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Complex</class-id> <category>initialize-release</category><body package="Info606" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	real := 0.	imaginary := 0.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><comment><class-id>Complex</class-id><body>Instance Variables:	imaginary	&lt;SmallInteger&gt;	description of imaginary	real	&lt;SmallInteger&gt;	description of real</body></comment><do-it>Complex organization addCategory: #opertators</do-it><do-it>Complex organization renameCategory: #opertators to: #operator</do-it><comment><class-id>Complex</class-id><body>* aComplex	"self time aComplex"	 |x |	x := Complex new.	x real: (self real * aComplex real) - (self imaginary * aComplex imaginary).	x imaginary: (self real * aComplex imaginary) + (self imaginary * aComplex real).	^x</body></comment><comment><class-id>Complex</class-id><body>Instance Variables:	imaginary	&lt;SmallInteger&gt;	description of imaginary	real	&lt;SmallInteger&gt;	description of real</body></comment><methods><class-id>Complex</class-id> <category>operator</category><body package="Info606" selector="*">* aComplex	"self time aComplex"	 |x |	x := Complex new.	x real: (self real * aComplex real) - (self imaginary * aComplex imaginary).	x imaginary: (self real * aComplex imaginary) + (self imaginary * aComplex real).	^x</body></methods><methods><class-id>Complex</class-id> <category>operator</category><body package="Info606" selector="+">+ aComplex	"Add aComplex to self"	 | x |	x := Complex new.	x real: self real + aComplex real.	x imaginary: self imaginary + aComplex imaginary.	^x</body></methods><methods><class-id>Complex class</class-id> <category>instance creation</category><body package="Info606" selector="newR:withI:">newR: r withI: i	"Answer a newly created and initialized instance."	| x |	x := Complex new.	x real: r.	x imaginary: i.		^x</body></methods><comment><class-id>Complex</class-id><body>Instance Variables:	imaginary	&lt;SmallInteger&gt;	description of imaginary	real	&lt;SmallInteger&gt;	description of real</body></comment><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/kevin/VisualWorks Projects/Info606/Info606.im' 'January 21, 2021' '7:27:43 AM')""An image file /home/kevin/VisualWorks Projects/Info606/Info606.im was created at 07:27:43 on 21 janvier 2021."</do-it><component-property><name>Info606</name> <type>package</type><property>comment</property> <value>'Package pour les tds et tps d''info606'</value></component-property><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/kevin/VisualWorks Projects/Info606/Info606.im' 'January 21, 2021' '7:30:50 AM')""An image file /home/kevin/VisualWorks Projects/Info606/Info606.im was created at 07:30:50 on 21 janvier 2021."</do-it><class><name>IntArray</name><environment>Smalltalk</environment><super>Core.Array</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>min max </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Info606</package></attributes></class><methods><class-id>IntArray</class-id> <category>accessing</category><body package="Info606" selector="min">min	^min</body></methods><methods><class-id>IntArray</class-id> <category>accessing</category><body package="Info606" selector="min:">min: anObject	min := anObject</body></methods><methods><class-id>IntArray</class-id> <category>accessing</category><body package="Info606" selector="max">max	^max</body></methods><methods><class-id>IntArray</class-id> <category>accessing</category><body package="Info606" selector="max:">max: anObject	max := anObject</body></methods><methods><class-id>IntArray</class-id> <category>initialize-release</category><body package="Info606" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	min := nil.	max := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><comment><class-id>IntArray</class-id><body>Instance Variables:	max	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of max	min	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of min</body></comment><do-it>x := IntArray new</do-it><do-it>x := IntArray new: 10</do-it><methods><class-id>Complex</class-id> <category>operator</category><body package="Info606" selector="*">* aComplex	"self time aComplex"	|x|	x := Complex new.	x real: (self real * aComplex real) - (self imaginary * aComplex imaginary).	x imaginary: (self real * aComplex imaginary) + (self imaginary * aComplex real).	^x</body></methods><methods><class-id>Complex</class-id> <category>operator</category><body package="Info606" selector="+">+ aComplex	"Add aComplex to self"	|x|	x := Complex new.	x real: self real + aComplex real.	x imaginary: self imaginary + aComplex imaginary.	^x</body></methods><do-it>x := IntArray withAll: #(45 2 78 569 58).</do-it><do-it>x := IntArray withAll: #(45 2 78 569 58).</do-it><do-it>x := IntArray new: 10.</do-it><do-it>x at: 2.x at: 2 put:4</do-it><do-it>x := IntArray withAll: #(45 2 78 569 58).</do-it><do-it>1 to: x size	do: [:i | Transcript show: (x at: i) printString.		    Transcript cr.	     ].</do-it><do-it>x := IntArray withAll: #(45 2 78 569 58).</do-it><do-it>1 to: x size	do: [:i | Transcript show: (x at: i) printString.		    Transcript cr.	     ].</do-it><do-it>1 to: x size	do: [:i | Transcript show: (x at: i) printString.		    Transcript cr.	     ].</do-it><do-it>IntArray organization addCategory: #modify</do-it><methods><class-id>IntArray</class-id> <category>sorting</category><body package="Info606" selector="sort">sort	</body></methods><do-it>IntArray organization removeCategory: #modify</do-it><remove-selector><class-id>IntArray</class-id> <selector>sort</selector></remove-selector><do-it>IntArray organization removeCategory: #sorting</do-it><do-it>IntArray organization addCategory: #sorting</do-it><methods><class-id>IntArray</class-id> <category>sorting</category><body package="Info606" selector="sort">sort	</body></methods><remove-selector><class-id>IntArray</class-id> <selector>sort</selector></remove-selector><do-it>IntArray organization removeCategory: #sorting</do-it><do-it>x sort.</do-it><do-it>IntArray organization addCategory: #sorting</do-it><do-it>x sort.</do-it><do-it>x sort.</do-it><do-it>x sort.</do-it><do-it>x sort.</do-it><methods><class-id>IntArray</class-id> <category>sorting</category><body package="Info606" selector="bubbleSort">bubbleSort	| t | "Variable servant pour l'échange"	1 to: (self size -1) "Pour i de 1 à taille du tableau"		do: [:i | 1 to: (self size -i) "Pour j de 1 à taille du tableau - i"				do: [:j | ((self at: j) &lt; (self at: (j+1))) ifTrue: [ "Si self[j] &lt; self[j-1]"						t := self at: j. "On échange j et j+1"						self at: j put: (self at: (j+1)).						self at: (j+1) put: t.						].					].			].			^self</body></methods><do-it>x := IntArray withAll: #(45 2 78 569 58).</do-it><do-it>x bubbleSort.</do-it><methods><class-id>IntArray</class-id> <category>sorting</category><body package="Info606" selector="bubbleSort">bubbleSort	| t | "Variable servant pour l'échange"	1 to: (self size -1) "Pour i de 1 à taille du tableau"		do: [:i | 1 to: (self size -i) "Pour j de 1 à taille du tableau - i"				do: [:j | ((self at: j) &gt; (self at: (j+1))) ifTrue: [ "Si self[j] &lt; self[j-1]"						t := self at: j. "On échange j et j+1"						self at: j put: (self at: (j+1)).						self at: (j+1) put: t.						].					].			].			^self</body></methods><do-it>x bubbleSort.</do-it><do-it>x bubbleSort.</do-it><do-it>x := IntArray withAll: #(45 2 78 569 58).</do-it><methods><class-id>IntArray</class-id> <category>sorting</category><body package="Info606" selector="findMin">findMin	</body></methods><methods><class-id>IntArray</class-id> <category>sorting</category><body package="Info606" selector="findMin">findMin	1 to: self size		do: [:i | (min = nil) | ((self at: i) &lt; min) ifTrue: [min := self at: i]].		^min</body></methods><methods><class-id>IntArray</class-id> <category>sorting</category><body package="Info606" selector="findMin">findMin	1 to: self size		do: [:i | ((min = nil) | ((self at: i) &lt; min)) ifTrue: [min := self at: i]].		^min</body></methods><do-it>x</do-it><do-it>x bubbleSort.</do-it><do-it>x</do-it><do-it>x</do-it><do-it>x min = nil.</do-it><methods><class-id>IntArray</class-id> <category>sorting</category><body package="Info606" selector="findMin">findMin	1 to: self size		do: [:i | (min = nil) ifTrue: [min := self at: i] ifFalse: [				((self at: i) &lt; min) ifTrue: [min := self at: i].				]			].		^min</body></methods><methods><class-id>IntArray</class-id> <category>sorting</category><body package="Info606" selector="findMin">findMin	1 to: self size		do: [:i | (min = nil) ifTrue: [min := self at: i] ifFalse: [				((self at: i) &lt; min) ifTrue: [min := self at: i].				].			].		^min</body></methods><do-it>x findMin.</do-it><do-it>x := IntArray withAll: #(45 2 78 569 58).</do-it><do-it>x := IntArray withAll: #(45 2 78 569 58).</do-it><do-it>x findMin.</do-it><methods><class-id>IntArray</class-id> <category>sorting</category><body package="Info606" selector="findMax">findMax	1 to: self size		do: [:i | (max = nil) ifTrue: [max := self at: i] ifFalse: [				((self at: i) &gt; max) ifTrue: [max := self at: i].				].			].		^max</body></methods><do-it>x findMax.</do-it><methods><class-id>IntArray</class-id> <category>accessing</category><body package="Info606" selector="at:put:">at: index put: value	</body></methods><remove-selector><class-id>IntArray</class-id> <selector>at:put:</selector></remove-selector><do-it>x at: 2 put: 43902.</do-it><do-it>x</do-it><methods><class-id>IntArray</class-id> <category>accessing</category><body package="Info606" selector="at:put:">at: i put: v	super at: i put: v.	self findMax.	self findMin.</body></methods><do-it>x at: 2 put: 43902.</do-it><do-it>x</do-it><methods><class-id>IntArray class</class-id> <category>instance creation</category><body package="Info606" selector="withAll:">withAll: aCollection	| newCollection |	newCollection := super withAll: aCollection.	newCollection findMin.	newCollection findMax.		^newCollection	</body></methods><methods><class-id>IntArray class</class-id> <category>instance creation</category><body package="Info606" selector="withAll:">withAll: aCollection	| newCollection |	newCollection := super withAll: aCollection."	newCollection findMin.""	newCollection findMax."		^newCollection</body></methods><methods><class-id>IntArray class</class-id> <category>instance creation</category><body package="Info606" selector="withAll:">withAll: aCollection	| newCollection |	newCollection := super withAll: aCollection. 	newCollection findMin. 	newCollection findMax.		^newCollection</body></methods><methods><class-id>IntArray class</class-id> <category>instance creation</category><body package="Info606" selector="withAll:">withAll: aCollection	| newCollection |	newCollection := IntArray new.	newCollection := super withAll: aCollection. 	newCollection findMin. 	newCollection findMax.		^newCollection</body></methods><methods><class-id>IntArray class</class-id> <category>instance creation</category><body package="Info606" selector="withAll:">withAll: aCollection	| newCollection |	newCollection := super withAll: aCollection. 	newCollection findMin. 	newCollection findMax.		^newCollection</body></methods><methods><class-id>IntArray class</class-id> <category>instance creation</category><body package="Info606" selector="withAll:">withAll: aCollection	| newCollection |	newCollection := self new.	newCollection addAll: aCollection. 	newCollection findMin. 	newCollection findMax.		^newCollection</body></methods><methods><class-id>IntArray class</class-id> <category>instance creation</category><body package="Info606" selector="withAll:">withAll: aCollection	| newCollection |	newCollection := IntArray new.	newCollection := super withAll: aCollection. 	newCollection findMin. 	newCollection findMax.		^newCollection</body></methods><methods><class-id>IntArray class</class-id> <category>instance creation</category><body package="Info606" selector="withAll:">withAll: aCollection	| newCollection |	newCollection := super withAll: aCollection. 	newCollection findMin. 	newCollection findMax.		^newCollection</body></methods><remove-selector><class-id>IntArray class</class-id> <selector>withAll:</selector></remove-selector><do-it>IntArray class organization removeCategory: #'instance creation'</do-it><methods><class-id>IntArray class</class-id> <category>instance creation</category><body package="Info606" selector="withAll:">withAll: aCollection	| newCollection |	newCollection := super withAll: aCollection.	newCollection findMin.	newCollection findMax.		^newCollection</body></methods><methods><class-id>IntArray class</class-id> <category>instance creation</category><body package="Info606" selector="withAll:">withAll: aCollection	| newCollection |	newCollection := ArrayedCollection withAll: aCollection.	newCollection findMin.	newCollection findMax.		^newCollection</body></methods><methods><class-id>IntArray class</class-id> <category>instance creation</category><body package="Info606" selector="withAll:">withAll: aCollection	| newCollection |	newCollection := super withAll: aCollection.	newCollection findMin.	newCollection findMax.		^newCollection</body></methods><methods><class-id>IntArray</class-id> <category>accessing</category><body package="Info606" selector="at:put:">at: i put: v	super at: i put: v.</body></methods><do-it>x := IntArray withAll: #(45 2 78 569 58).</do-it><do-it>x</do-it><do-it>x := IntArray withAll: #(45 2 78 569 58).</do-it><do-it>x bubbleSort.</do-it><do-it>x findMax.</do-it><methods><class-id>IntArray</class-id> <category>accessing</category><body package="Info606" selector="at:put:">at: i put: v	super at: i put: v.	self findMin.	self findMax.</body></methods><methods><class-id>IntArray</class-id> <category>sorting</category><body package="Info606" selector="findMax">findMax	1 to: self size		do: [:i | (max = nil) ifTrue: [max := self at: i] ifFalse: [					((self at: i) = nil) ifFalse: [						((self at: i) &gt; max) ifTrue: [max := self at: i].					].				].			].		^max</body></methods><methods><class-id>IntArray</class-id> <category>sorting</category><body package="Info606" selector="findMin">findMin	1 to: self size		do: [:i | (min = nil) ifTrue: [min := self at: i] ifFalse: [					((self at: i) = nil) ifFalse: [						((self at: i) &lt; min) ifTrue: [min := self at: i].					].				].			].		^min</body></methods><do-it>x := IntArray withAll: #(45 2 78 569 58).</do-it><do-it> #(45 2 78 569 58)</do-it><do-it>x := IntArray withAll: #(45 2 78 569 58).</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/kevin/VisualWorks Projects/Info606/Info606.im' 'January 21, 2021' '11:26:13 AM')""An image file /home/kevin/VisualWorks Projects/Info606/Info606.im was created at 11:26:13 on 21 janvier 2021."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/kevin/VisualWorks Projects/Info606/Info606.im' 'January 21, 2021' '11:27:19 AM')""An image file /home/kevin/VisualWorks Projects/Info606/Info606.im was created at 11:27:19 on 21 janvier 2021."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/kevin/VisualWorks Projects/Info606/Info606.im' 'January 21, 2021' '11:27:23 AM')""An image file /home/kevin/VisualWorks Projects/Info606/Info606.im was created at 11:27:23 on 21 janvier 2021."</do-it>